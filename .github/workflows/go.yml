name: Go Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.23'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        # Set binary name with extension for Windows
        BINARY_NAME="vandor"
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="vandor.exe"
        fi
        
        # Build with version info
        VERSION=${GITHUB_REF_NAME:-dev}
        COMMIT=${GITHUB_SHA::8}
        BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        go build \
          -ldflags="-X 'main.version=${VERSION}' -X 'main.commit=${COMMIT}' -X 'main.date=${BUILD_DATE}'" \
          -o "dist/${BINARY_NAME}-${GOOS}-${GOARCH}${BINARY_NAME##vandor}" \
          main.go

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: vandor-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release
        
        # Create archives for each platform
        for artifact in artifacts/vandor-*; do
          if [ -d "$artifact" ]; then
            platform=$(basename "$artifact" | sed 's/vandor-//')
            
            # Copy binary to release directory
            cp "$artifact"/* release/ 2>/dev/null || true
            
            # Create tar.gz for Unix-like systems
            if [[ "$platform" == *"linux"* ]] || [[ "$platform" == *"darwin"* ]]; then
              binary_name=$(ls "$artifact"/vandor-* | head -1 | xargs basename)
              cd "$artifact"
              tar -czf "../release/vandor-${platform}.tar.gz" "$binary_name"
              cd ..
            fi
            
            # Create zip for Windows
            if [[ "$platform" == *"windows"* ]]; then
              binary_name=$(ls "$artifact"/vandor-* | head -1 | xargs basename)
              cd "$artifact"
              zip "../release/vandor-${platform}.zip" "$binary_name"
              cd ..
            fi
          fi
        done

    - name: Generate changelog
      run: |
        # Simple changelog generation
        echo "## Changes in ${GITHUB_REF_NAME}" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          git log --pretty=format:"- %s (%h)" "$LAST_TAG"..HEAD >> CHANGELOG.md
        else
          git log --pretty=format:"- %s (%h)" --max-count=10 >> CHANGELOG.md
        fi
        
        echo "" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## Installation" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Quick Install" >> CHANGELOG.md
        echo '```bash' >> CHANGELOG.md
        echo 'curl -fsSL https://raw.githubusercontent.com/alfariiizi/vandor-cli/main/install-vandor.sh | bash' >> CHANGELOG.md
        echo '```' >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Manual Download" >> CHANGELOG.md
        echo "Download the appropriate binary for your platform from the assets below." >> CHANGELOG.md

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: release/*
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update installation script
      run: |
        # This ensures the install script is always available
        cp install-vandor.sh release/
        
        # Commit the updated script if needed
        if git diff --quiet install-vandor.sh; then
          echo "Installation script is up to date"
        else
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add install-vandor.sh
          git commit -m "Update installation script for ${GITHUB_REF_NAME}" || echo "No changes to commit"
          git push origin main || echo "Could not push installation script update"
        fi

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: false # Temporarily disabled due to GHCR permissions
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max