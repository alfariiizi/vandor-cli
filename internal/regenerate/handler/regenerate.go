package handler

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"os"
	"path/filepath"
	"sort"
	"strings"

	"github.com/alfariiizi/vandor-cli/internal/utils"
)

func RegenerateHandler() error {
	routeDir := "internal/delivery/http/route"
	var invokes []string
	importAliasMap := map[string]string{} // group => alias

	moduleName := utils.GetModuleName()

	entries, err := os.ReadDir(routeDir)
	if err != nil {
		return err
	}

	for _, entry := range entries {
		if !entry.IsDir() {
			continue
		}

		group := entry.Name()
		groupDir := filepath.Join(routeDir, group)
		importAlias := group + "_handler"
		importAliasMap[group] = importAlias

		files, err := os.ReadDir(groupDir)
		if err != nil {
			continue
		}

		for _, file := range files {
			if strings.HasSuffix(file.Name(), ".go") && file.Name() != "service.go" {
				fset := token.NewFileSet()
				astFile, err := parser.ParseFile(fset, filepath.Join(groupDir, file.Name()), nil, parser.AllErrors)
				if err != nil {
					continue
				}

				for _, decl := range astFile.Decls {
					fn, ok := decl.(*ast.FuncDecl)
					if ok && fn.Recv == nil && fn.Name.IsExported() && strings.HasPrefix(fn.Name.Name, "New") {
						invokes = append(invokes, fmt.Sprintf("%s.%s", importAlias, fn.Name.Name))
					}
				}
			}
		}
	}

	// Begin writing routes.go
	var buf bytes.Buffer
	buf.WriteString("// Package route provides HTTP routes for the application.\n")
	buf.WriteString("// Code generated by HTTP Handler Generator. DO NOT EDIT.\n")
	buf.WriteString("// Template: https://github.com/alfariiizi/vandor-cli.\n")
	buf.WriteString("package route\n\n")
	buf.WriteString("import (\n")
	for _, group := range sortedKeys(importAliasMap) {
		buf.WriteString(fmt.Sprintf("\t%s \"%s/internal/delivery/http/route/%s\"\n",
			importAliasMap[group], moduleName, group))
	}
	buf.WriteString("\t\"go.uber.org/fx\"\n)\n\n")

	buf.WriteString("var Module = fx.Module(\n")
	buf.WriteString("\t\"route\",\n")
	buf.WriteString("\tfx.Invoke(\n")
	for _, invoke := range invokes {
		buf.WriteString(fmt.Sprintf("\t\t%s,\n", invoke))
	}
	buf.WriteString("\t),\n")
	buf.WriteString(")\n")

	// Write to file
	if err := os.WriteFile(filepath.Join(routeDir, "routes.go"), buf.Bytes(), 0644); err != nil {
		return err
	}

	fmt.Printf("âœ… Successfully regenerated routes\n")
	return nil
}

func sortedKeys(m map[string]string) []string {
	keys := make([]string, 0, len(m))
	for k := range m {
		keys = append(keys, k)
	}
	sort.Strings(keys)
	return keys
}
